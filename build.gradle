plugins {
    id 'java'
    id 'com.github.johnrengelman.shadow' version '8.1.1'
}

group = 'cn.huohuas001'
version = '1.0.1'
def targetJavaVersion = 17

repositories {
    mavenCentral()
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/groups/public/"
    }
    maven {
        url = 'https://jitpack.io'
    }
    maven {
        name = "repo-lanink-cn"
        url = "https://repo.lanink.cn/repository/maven-public/"
    }
}

dependencies {
    compileOnly 'cn.nukkit:Nukkit:MOT-SNAPSHOT'
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'

    implementation 'org.java-websocket:Java-WebSocket:1.5.4'
    implementation 'com.alibaba.fastjson2:fastjson2:2.0.52'
}

jar {
    archiveFileName = 'HuHoBot.jar'
    manifest {
        attributes 'Main-Class': 'cn.huohuas001.huHoBot'
    }
}

shadowJar {
    archiveFileName = "HuHoBot-${project.version}-Nukkit-MOT.jar"
    minimize()
}

// 新增配置生成任务
task generateServerConfig(type: Copy) {
    group = 'Build'
    description = '生成服务器配置类'

    from 'src/main/templates/java'
    into 'src/main/generated/java'

    // 新增文件名处理
    include '**/*.template'
    rename { filename ->
        filename.replace('.template', '')
    }

    filter { line ->
        line.replace('${WS_SERVER_URL}',
                project.findProperty('wsServerUrl') ?: 'ws://127.0.0.1:8080')
    }

    filteringCharset = 'UTF-8'
}


// 将生成的代码目录加入源码集
sourceSets.main.java.srcDir 'src/main/generated/java'

// 确保编译前先执行生成任务
compileJava.dependsOn generateServerConfig

clean {
    delete 'src/main/generated'
}



java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release.set(targetJavaVersion)
    }
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
    filesMatching('config.yml') {
        expand props
    }
}

